name: Deploy Lambda

on:
  push:
    branches: [main]

permissions:
  id-token: write    # Required for OIDC auth with AWS
  contents: read     # Required to fetch code

jobs:
  deploy:
    name: Package and Upload Lambda Functions
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # AWS Auth via OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::288761743924:role/github-actions-lambda-role
          aws-region: eu-west-1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Package each Lambda
      - name: Package Lambdas
        run: |
          cd lambdas/
          for dir in */; do
            echo "Packaging $dir..."
            cd "$dir"

            mkdir -p package

            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt -t ./package
            fi

            cp *.py ./package/
            cd package
            zip -r9 "../../${dir%/}.zip" ./
            cd ../..
          done

      # Upload packaged Lambdas to S3
      - name: Upload to S3
        run: |
          cd lambdas/
          for zipfile in *.zip; do
            echo "Uploading $zipfile to S3..."
            aws s3 cp "$zipfile" "s3://lambdacicdtest0123/lambda-zips/$zipfile"
          done
          echo "All Lambda packages uploaded!"

  terraform:
    name: Apply Terraform Configuration
    runs-on: ubuntu-latest
    needs: deploy  # Ensures Lambda packaging/upload completes first

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::288761743924:role/github-actions-lambda-role
          aws-region: eu-west-1

      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install -y gnupg

      - name: Decrypt Terraform state
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd terraform/
          gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --output terraform.tfstate --decrypt terraform.tfstate.gpg

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init and Apply
        run: |
          cd terraform/
          terraform init
          terraform apply -auto-approve
